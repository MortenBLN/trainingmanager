// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Trainingsmanager.Database;

#nullable disable

namespace Trainingsmanager.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250620095819_updateLocalDb")]
    partial class updateLocalDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AppUserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uuid");

                    b.HasKey("SessionId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("AppUserSession");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int?>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AppUsers");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ApplicationsLimit")
                        .HasColumnType("integer");

                    b.Property<int>("ApplicationsRequired")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SessionGroupId")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionGruppenName")
                        .HasColumnType("text");

                    b.Property<string>("Teamname")
                        .HasColumnType("text");

                    b.Property<DateTime>("TrainingEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("TrainingStart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("SessionGroupId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.SessionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SessionGruppenName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SessionGroups");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.Subscription", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SubscribedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("integer");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("UserName", "SessionId")
                        .IsUnique();

                    b.ToTable("Subscriptions");
                });

            modelBuilder.Entity("AppUserSession", b =>
                {
                    b.HasOne("Trainingsmanager.Database.Models.Session", null)
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Trainingsmanager.Database.Models.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.Session", b =>
                {
                    b.HasOne("Trainingsmanager.Database.Models.AppUser", "CreatedBy")
                        .WithMany("CreatedSessions")
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Trainingsmanager.Database.Models.SessionGroup", "SessionGroup")
                        .WithMany("Sessions")
                        .HasForeignKey("SessionGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("SessionGroup");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.Subscription", b =>
                {
                    b.HasOne("Trainingsmanager.Database.Models.Session", "Session")
                        .WithMany("Subscriptions")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Session");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.AppUser", b =>
                {
                    b.Navigation("CreatedSessions");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.Session", b =>
                {
                    b.Navigation("Subscriptions");
                });

            modelBuilder.Entity("Trainingsmanager.Database.Models.SessionGroup", b =>
                {
                    b.Navigation("Sessions");
                });
#pragma warning restore 612, 618
        }
    }
}
